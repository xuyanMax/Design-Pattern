package factory;

/**
 * Created by xu on 2017/6/26.
 */
public class SUMMARY {
}

/*
http://blog.csdn.net/superbeck/article/details/4446177


简单工厂，工厂方法，抽象工厂都属于设计模式中的创建型模式。其主要功能都是帮助我们把对象的实例化部分抽取了出来，优化了系统的架构，并且增强了系统的扩展性。

===把工厂定义成一个静态的方法会怎样？
静态工厂，不需要使用创建对象的方法来实例化对; 但是 不能通过继承来改变创建方法的行为。

=== 简单工厂

不算一种设计模式，是一种编程习惯，

=====工厂模式（使用继承）
总之，所有的工厂模式都用来封装对象的创建。工厂模式通过让子类来决定创建的对象是什么，来达到将对象创建的过程封装的目的。

===使用抽象工厂
当你需要创建产品家族和想让制造的相关产品集合起来时

=====正式定义
定义了一个创建对象的接口，但由子类决定要实例化的类是那一个。工厂模式让类的实例化推迟到子类




====简答工厂与工厂模式的差异
简单工厂把全部的事情，在一个地方处理完；然而工厂方法却是创建了一个框架，让子类去决定要如何实现。
简单工厂可以将对象的创建封装起来，但是不具备工厂方法的弹性，因为无法在变更正在生产的产品。

===抽象工厂（使用对象组合）
抽象工程所提供的接口，可以创建产品的家族！
利用这个接口写代码，我们的代码将从实际工厂解耦，以便在不同的上下文中实现各式各样的工厂，制造出各种不同的产品。
例如，不用的区域，不同的操作系统，不同的外观

===正式定义
提供一个接口，用于创建相关或依赖对象的家族（相关产品），而不需要指明具体类


*/